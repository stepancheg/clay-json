import maybe.*;
import parsing.combinators.strings.*;
import parsing.combinators.wrapper.*;
import vectors.*;

import json.*;
import json.escape.*;
import json.support.decimal.*;

// tokenizer

private enum JsonTokenType (
    OPENING_BRACE_TYPE,
    CLOSING_BRACE_TYPE,
    OPENING_BRACKET_TYPE,
    CLOSING_BRACKET_TYPE,
    COMMA_TYPE,
    COLON_TYPE,
    NUMBER_TYPE,
    STRING_TYPE,
    TRUE_TYPE,
    FALSE_TYPE,
    NULL_TYPE,
);

private variant JsonTokenData (String, Decimal, Nothing);

private record JsonToken (
    type: JsonTokenType,
    data: JsonTokenData,
);

private keywordTokenParser(tokenType, keyword) = modify(t => JsonToken(tokenType, JsonTokenData(Nothing)), literalString(keyword));

private var digit19Parser = condition(c => ((c >= '1') and (c <= '9')));
private var digitParser = condition(c => ((c >= '0') and (c <= '9')));

private var hexdigitValueParser =
    choice(
        modify(c => UInt(c) - UInt('0'), condition(c => (c >= '0') and (c <= '9'))),
        modify(c => UInt(c) - UInt('a'), condition(c => (c >= 'a') and (c <= 'z'))),
        modify(c => UInt(c) - UInt('A'), condition(c => (c >= 'A') and (c <= 'Z'))),
    );

private define joinBackImpl;

overload joinBackImpl(r, s: String) {
    push(r, s);
}

overload joinBackImpl(r, c: Char) {
    push(r, c);
}

// TODO: hack
[T | Tuple?(T)]
overload joinBackImpl(r, t: T) {
    ..for (v in ..unpackTuple(t)) {
        joinBackImpl(r, v);
    }
}

[T]
overload joinBackImpl(r, m: Maybe[T]) {
    maybe(m, just -> ..joinBackImpl(r, just));
}

private joinBack(v) {
    var r = String();
    joinBackImpl(r, v);
    return r;
}

private choiceJoin(..parsers) =
    choice(..mapValues(p => modify(r => joinBack(r), p), ..parsers));


private digitValue(digit) = UInt(digit) - UInt('0');

private foldBeforeDot(t) {
    var firstDigit = t.0;
    var rest = t.1;
    var r = UInt64(digitValue(firstDigit));
    for (c in rest) {
        r = r * 10 + digitValue(c);
    }
    return Decimal(r);
}

private foldAfterDot(digits) {
    var r = 0ul;
    for (c in digits) {
        r = r * 10 + digitValue(c);
    }
    return Decimal(r, -Int(size(digits)));
}

private foldUnsignedIntegerDigits(digits) {
    var r = 0ul;
    for (c in digits) {
        r = r * 10 + digitValue(c);
    }
    return r;
}

var unsignedIntegerParser =
    modify(foldUnsignedIntegerDigits, oneOrMore(digitParser));

var signedIntegerParser =
    modify(t -> t.0 * Int64(t.1), [
        modify(o -> maybe(o, some -> some, () -> 1), optional(
            modify(c -> if (c == '+') 1 else -1, choice('+', '-'))
        )),
        unsignedIntegerParser,
    ]);

private var numberTokenParser =
    modify(
        t => {
            var minus? = just?(t.0);
            var digitsBeforeDot = t.1;
            var digitsAfterDot = t.2;
            var exp = t.3;
            
            var r = exp10(digitsBeforeDot + digitsAfterDot, exp);
            if (minus?)
                r = -r;
            
            return JsonToken(NUMBER_TYPE, JsonTokenData(r));
        },
        [
            optional('-'),
            choice(
                modify(x -> Decimal(0), '0'),
                modify(foldBeforeDot, [digit19Parser, zeroOrMore(digitParser)]),
            ),
            modify(o -> maybe(o, t -> t.1, () -> Decimal(0)), optional([
                '.',
                modify(foldAfterDot, oneOrMore(digitParser)),
            ])),
            modify(o -> maybe(o, t -> t.1, () -> 0l), optional([
                choice('e', 'E'),
                signedIntegerParser,
            ])),
        ]
    );

unescapeCharParser(escape, value) =
    modify(c => value, condition(c => c == escape));

overload bitor(d1, d2, d3, d4) =
    bitor(bitor(d1, d2), bitor(d3, d4));

private makeU(d1, d2, d3, d4) =
    bitor(bitshl(d1, 12), bitshl(d2, 8), bitshl(d3, 4), bitshl(d4, 0));

private var stringCharParser =
    choice(
        modify(t -> t.1,
            [
                condition(c -> c == '\\'),
                choice(
                    condition(c -> c == '"' or c == '\\'),
                    unescapeCharParser('n', '\n'),
                    unescapeCharParser('r', '\r'),
                    unescapeCharParser('t', '\t'),
                    unescapeCharParser('f', '\x0c'),
                    unescapeCharParser('b', '\x08'),
                    modify(t -> Char(makeU(t.1, t.2, t.3, t.4)), [
                        condition(c -> c == 'u'),
                        hexdigitValueParser,
                        hexdigitValueParser,
                        hexdigitValueParser,
                        hexdigitValueParser,
                    ]),
                ),
            ]
        ),
        condition(c -> c != '"'),
    );

private var stringTokenParser =
    modify(
        t -> JsonToken(STRING_TYPE, JsonTokenData(t.1)),
        [
            '"',
            zeroOrMore(stringCharParser),
            '"',
        ]
    );


private var tokenParser = choice(
    keywordTokenParser(OPENING_BRACE_TYPE, "{"),
    keywordTokenParser(CLOSING_BRACE_TYPE, "}"),
    keywordTokenParser(OPENING_BRACKET_TYPE, "["),
    keywordTokenParser(CLOSING_BRACKET_TYPE, "]"),
    keywordTokenParser(COMMA_TYPE, ","),
    keywordTokenParser(COLON_TYPE, ":"),
    keywordTokenParser(TRUE_TYPE, "true"),
    keywordTokenParser(FALSE_TYPE, "false"),
    keywordTokenParser(NULL_TYPE, "null"),
    numberTokenParser,
    stringTokenParser,
);

var spaceParser = zeroOrMore(choice(' ', '\t', '\r', '\n')); // TODO: lame

var tokensParser = modify(x -> x.1, [spaceParser, separatedList(spaceParser, tokenParser), spaceParser]);

private tokenize(input): Vector[JsonToken] {
    var iterator = iterator(input);
    var result = require(tokensParser(iterator));
    if (hasNext?(iterator)) {
        error("not exhausted");
    }
    return result;
}


// parser

private var jsonCombinators = Combinators[Type(iterator(Vector[JsonToken]()))]();

private tokenTypeParser(tokenType) = jsonCombinators.condition(t => t.type == tokenType);

private var stringValueParser = jsonCombinators.modify(t -> variantAs(t.data, String), tokenTypeParser(STRING_TYPE));

private var nullParser = jsonCombinators.modify(t -> JsonNull(), tokenTypeParser(NULL_TYPE));
private var trueParser = jsonCombinators.modify(t -> JsonBoolean(true), tokenTypeParser(TRUE_TYPE));
private var falseParser = jsonCombinators.modify(t -> JsonBoolean(false), tokenTypeParser(FALSE_TYPE));
private var numberParser = jsonCombinators.modify(t -> JsonNumber(variantAs(t.data, Decimal)), tokenTypeParser(NUMBER_TYPE));
private var stringParser = jsonCombinators.modify(s -> JsonString(s), stringValueParser);

private var objectParser =
    jsonCombinators.modify(
        x -> JsonObject(x.1),
        [
            tokenTypeParser(OPENING_BRACE_TYPE),
            jsonCombinators.optSeparatedList(
                tokenTypeParser(COMMA_TYPE),
                jsonCombinators.modify(x -> [x.0, x.2], [
                    stringValueParser,
                    tokenTypeParser(COLON_TYPE),
                    valueParser,
                ]),
            ),
            tokenTypeParser(CLOSING_BRACE_TYPE),
        ]
    );

private var arrayParser =
    jsonCombinators.modify(
        x -> JsonArray(x.1),
        [
            tokenTypeParser(OPENING_BRACKET_TYPE),
            jsonCombinators.optSeparatedList(
                tokenTypeParser(COMMA_TYPE),
                valueParser,
            ),
            tokenTypeParser(CLOSING_BRACKET_TYPE),
        ]
    );

[V]
private variantParser(static V, ..parsers) {
    return jsonCombinators.choice(..mapValues(p => jsonCombinators.modify(V, p), ..parsers));
}

private valueParser(input): Maybe[JsonValue] =
    variantParser(JsonValue,
        nullParser, trueParser, falseParser, numberParser, stringParser, arrayParser, objectParser)(input);

parseJson(input): JsonValue {
    var tokens = tokenize(input);
    return require(valueParser(iterator(tokens)));
}

