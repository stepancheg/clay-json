import test.*;

import json.*;


jsonTestSuite() =
    TestSuite(
        "json model", array(
            // JsonArray tests
            TestCase("JsonValue(rvalue JsonArray)", test => {
                var v = JsonValue(JsonArray());
            }),
            TestCase("JsonValue(lvalue JsonArray)", test => {
                var a = JsonArray();
                var v = JsonValue(a);
            }),
            TestCase("JsonArray empty", test => {
                var a = JsonArray();
                var b = a;
                expectEqual(test, "size", 0, size(b));
            }),
            TestCase("JsonArray from tuple of elements", test => {
                var a = JsonArray([1, "a", 9]);
                var b = a;
                expectEqual(test, "size", 3, size(b));
            }),
            TestCase("JsonArray from Vector of JsonValue", test => {
                var v = Vector[JsonValue]();
                push(v, JsonValue(JsonNull()));
                var a = JsonArray(v);
                expectEqual(test, "size", 1, size(a));
                expectTrue(test, "isNull", isNull(a[0]));
            }),
            TestCase("JsonArray from JsonArray", test => {
                var a1 = JsonArray([5, 3]);
                var a2 = JsonArray(a1);
                expectEqual(test, "size", 2, size(a2));
                expectTrue(test, "isNumber", isNumber(a2[0]));
                expectEqual(test, "5", 5, Int(a2[0]));
            }),
            
            // JsonObject tests
            TestCase("JsonObject from empty key value", test => {
                var o = JsonObject([]);
            }),
            TestCase("JsonObject from kvs", test => {
                var o = JsonObject([size: 12, color: "red"]);
                expectEqual(test, "size", 2, size(o));
            }),
        ),
    );

jsonTestMain() = testMain(jsonTestSuite());

main() = jsonTestMain();


