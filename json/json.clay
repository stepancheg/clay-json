import vectors.*;
import maybe.*;
import numbers.parser.*;

import json.escape.*;

/// model

record JsonArray (
    data: Vector[JsonValue]
);

alias JsonObjectKeyValue = Tuple[String, JsonValue];

record JsonObject (
    data: Vector[JsonObjectKeyValue]
);

record JsonNull (
);

record JsonNumber (
    value: String
);

record JsonString (
    // unquoted
    value: String
);

record JsonBoolean (
    value: Bool
);

variant JsonValue (JsonArray, JsonObject, JsonNull, JsonNumber, JsonString, JsonBoolean);

isArray(value) = variantIs?(value, JsonArray);
isObject(value) = variantIs?(value, JsonObject);
isNull(value) = variantIs?(value, JsonNull);
isNumber(value) = variantIs?(value, JsonNumber);
isString(value) = variantIs?(value, JsonString);
isBoolean(value) = variantIs?(value, JsonBoolean);

getArray(value) = variantAs(value, JsonArray);
getObject(value) = variantAs(value, JsonObject);
getNull(value) = variantAs(value, JsonNull);
getNumber(value) = variantAs(value, JsonNumber);
getString(value) = variantAs(value, JsonString);
getBoolean(value) = variantAs(value, JsonBoolean);

getBooleanValue(value) = getBoolean(value).value;
getIntValue(value) = parseInt32(getNumber(value).value);
getStringValue(value) = getString(value).value;

overload push(array: JsonArray, value) =
    ..push(array.data, value);

overload push(object: JsonObject, value) =
    ..push(object.data, value);

overload index(array: JsonArray, i): JsonValue =
    index(array.data, i);

overload index(object: JsonObject, k): JsonValue {
    for (t in object.data) {
        if (t.0 == k)
            return t.1;
    }
    error("no key " + k);
    throw Error();
}

[I | Integer?(I)]
overload index(array: JsonValue, i: I): JsonValue =
    index(getArray(array), i);

[K | String?(K)]
overload index(object: JsonValue, k: K): JsonValue =
    index(getObject(object), k);

overload size(array: JsonArray) = size(array.data);
overload size(object: JsonObject) = size(object.data);
overload size(string: JsonString) = size(string.value);

overload size(value: JsonValue) {
    if (isArray(value))
        return size(getArray(value));
    else if (isObject(value))
        return size(getObject(value));
    else if (isString(value))
        return size(getString(value));
    else {
        error("value has no size");
        throw Error();
    }
}


