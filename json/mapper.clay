import lambdas.*;

import json.*;

[T]
define jsonMapper(static T);

[M]
JsonMapper?(static M) = false;

[M | JsonMapper?(M)]
define JsonMapperMaps(static M);

[M]
JsonMapperMapsFrom(static M) = nthValue(static 0, ..JsonMapperMaps(M));
[M]
JsonMapperMapsTo(static M) = nthValue(static 1, ..JsonMapperMaps(M));

[M, T | JsonMapper?(M) and JsonMapperMapsFrom(M) == T]
define mapToJson(m: M, t: T);

[M, J | JsonMapper?(M) and JsonAnything?(J)]
define mapFromJson(m: M, j: J);


[M | JsonMapper?(M)]
overload mapFromJson(m: M, j: JsonValue) =
    mapFromJson(m, variantAs(j, JsonMapperMapsTo(M)));


/// record mapper


// overload to specify custom json field name for record field
[R, N]
RecordJsonFieldName(static R, static N) = N;

// overload to exclude some field from serialization and deserialization
[R, N]
IncludeRecordJsonField(static R, static N) = true;



[R, N, JsonFieldName]
record RecordJsonFieldMapper[R, N, JsonFieldName](
);


private define filterValues;

overload filterValues(pred) = ;

[Pred, First | Pred(First)]
overload filterValues(static Pred, static First, ..xs) = First, ..filterValues(Pred, ..xs);

[Pred, First | not Pred(First)]
overload filterValues(static Pred, static First, ..xs) = ..filterValues(Pred, ..xs);


[R]
MakeRecordJsonMapper(static R) {
    var f = name -> [static name, RecordJsonFieldMapper[R, name, RecordJsonFieldName(R, name)]];
    return ..mapValues(f, ..filterValues(Name -> IncludeRecordJsonField(R, Name), ..RecordFieldNames(R)));
}

record RecordJsonMapper[R] = ..MakeRecordJsonMapper(R);

overload JsonMapper?(RecordJsonMapper) = true;
[R]
overload JsonMapperMaps(static RecordJsonMapper[R]) = R, JsonObject;


[R | Record?(R)]
overload jsonMapper(static R) = RecordJsonMapper[R]();

[R, N, JsonFieldName]
mapRecordFieldToJson(m: RecordJsonFieldMapper[R, N, JsonFieldName], r: R, j) {
    var fieldMapper = jsonMapper(Type(fieldRef(null(R)^, N)));
    var v = JsonValue(mapToJson(fieldMapper, fieldRef(r, N)));
    put(j, JsonFieldName, v);
}

[R, N, JsonFieldName]
mapRecordFieldFromJson(m: RecordJsonFieldMapper[R, N, JsonFieldName], j, r: R) {
    var fieldMapper = jsonMapper(Type(fieldRef(null(R)^, N)));
    var jsonFieldValue = index(j, JsonFieldName);
    fieldRef(r, N) = mapFromJson(fieldMapper, jsonFieldValue);
}

[R]
overload mapToJson(m: RecordJsonMapper[R], r: R) {
    var j = JsonObject();
    ..for (fieldMapper in ..recordFields(m)) {
        mapRecordFieldToJson(fieldMapper, r, j);
    }
    return j;
}

[R]
overload mapFromJson(m: RecordJsonMapper[R], j: JsonObject) {
    var r = R();
    ..for (fieldMapper in ..recordFields(m)) {
        mapRecordFieldFromJson(fieldMapper, j, r);
    }
    return r;
}

/// string mapper


record StringJsonMapper ();

overload JsonMapper?(static StringJsonMapper) = true;
overload JsonMapperMaps(static StringJsonMapper) = String, JsonString;

overload jsonMapper(static String) = StringJsonMapper();

overload mapToJson(m: StringJsonMapper, s: String) = JsonString(s);

overload mapFromJson(m: StringJsonMapper, j: JsonString) = j.value;


/// numeric mapper

[N | Numeric?(N)]
record NumericJsonMapper[N]();

[N]
overload JsonMapper?(static NumericJsonMapper[N]) = true;
[N]
overload JsonMapperMaps(static NumericJsonMapper[N]) = N, JsonNumber;

[N | Numeric?(N)]
overload jsonMapper(static N) = NumericJsonMapper[N]();

[N]
overload mapToJson(m: NumericJsonMapper[N], n: N) = JsonNumber(n);

[N]
overload mapFromJson(m: NumericJsonMapper[N], j: JsonNumber) = N(j);


/// bool mapper

record BoolMapper();

overload JsonMapper?(static BoolMapper) = true;
overload JsonMapperMaps(static BoolMapper) = Bool, JsonBoolean;

overload jsonMapper(static Bool) = BoolMapper();

overload mapToJson(m: BoolMapper, b: Bool) = JsonBoolean(b);

overload mapFromJson(m: BoolMapper, j: JsonBoolean) = j.value;



/// quick functions construct mapper and then unmap using that mapper
/// these functions can be expension if mapper construction is expensive

[T]
mapToJsonQuick(t: T) = mapToJson(jsonMapper(static T), t);

[T, J | JsonAnything?(J)]
mapFromJsonQuick(static T, j: J) = mapFromJson(jsonMapper(T), j);

