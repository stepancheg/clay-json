import lambdas.*;

import json.*;
import json.support.values.*;
import json.support.records.*;

[T]
define JsonMapper(static T);

[T]
jsonMapper(static T) = JsonMapper(T)();

[M]
define JsonMapperMaps(static M);

[M]
JsonMapper?(static M) = CallDefined?(JsonMapperMaps, Static[M]);

[M]
JsonMapperMapsFrom(static M) = nthValue(static 0, ..JsonMapperMaps(M));
[M]
JsonMapperMapsTo(static M) = nthValue(static 1, ..JsonMapperMaps(M));

[M, T | JsonMapper?(M) and JsonMapperMapsFrom(M) == T]
define mapToJson(m: M, t: T);

[M, J | JsonMapper?(M) and JsonAnything?(J)]
define mapFromJson(m: M, j: J);


[M | JsonMapper?(M)]
overload mapFromJson(m: M, j: JsonValue) =
    mapFromJson(m, variantAs(j, JsonMapperMapsTo(M)));


/// record mapper


// overload to specify custom json field name for record field
// executed at compile time, must return static
[R, N]
RecordJsonFieldName(static R, static N) = N;

// overload to specify custon json field name for record field
// execute at mapper construction time, so mapToJsonQuick may be slow
// necessary when field name cannot be computed at compile time
[R, N]
define recordJsonFieldName(static R, static N);

// overload to exclude some field from serialization and deserialization
[R, N]
IncludeRecordJsonField(static R, static N) = true;



// field json name holder

RecordFieldJsonNameHolder?(T) = false;
[R | RecordFieldJsonNameHolder?(R)]
define recordFieldJsonNameHolderGet(r: R);

[R, FieldName]
define RecordFieldJsonNameHolder(static R, static FieldName);


// static name holder

record RecordFieldJsonNameHolderStatic[JsonFieldName] ();

[JsonFieldName]
overload RecordFieldJsonNameHolder?(static RecordFieldJsonNameHolderStatic[JsonFieldName]) = true;

[R, FieldName]
overload RecordFieldJsonNameHolder(static R, static FieldName) =
    RecordFieldJsonNameHolderStatic[RecordJsonFieldName(R, FieldName)];

[JsonFieldName]
overload recordFieldJsonNameHolderGet(r: RecordFieldJsonNameHolderStatic[JsonFieldName]) = StaticName(JsonFieldName);

// dynamic name holder

[R, FieldName]
record RecordFieldJsonNameHolderDynamic[R, FieldName] (
    jsonFieldName: String,
);

[R, FieldName]
overload RecordFieldJsonNameHolderDynamic[R, FieldName]() =
    RecordFieldJsonNameHolderDynamic[R, FieldName](recordJsonFieldName(R, FieldName));

[R, FieldName]
overload RecordFieldJsonNameHolder?(static RecordFieldJsonNameHolderDynamic[R, FieldName]) = true;

[R, FieldName | CallDefined?(recordJsonFieldName, Static[R], Static[FieldName])]
overload RecordFieldJsonNameHolder(static R, static FieldName) =
    RecordFieldJsonNameHolderDynamic[R, FieldName];

[R, FieldName]
overload recordFieldJsonNameHolderGet(r: RecordFieldJsonNameHolderDynamic[R, FieldName]) = r.jsonFieldName;


// 

[R, FieldName]
record RecordFieldJsonMapper[R, FieldName] (
    jsonNameHolder: RecordFieldJsonNameHolder(static R, static FieldName),
    valueMapper: JsonMapper(RecordFieldTypeByName(R, FieldName)),
);

[R, FieldName]
RecordFieldJsonMapperFieldName(static RecordFieldJsonMapper[R, FieldName]) = FieldName;

[M, R]
mapRecordFieldToJson(m: M, r: R, j) {
    alias FieldName = RecordFieldJsonMapperFieldName(M);
    var jsonName = recordFieldJsonNameHolderGet(m.jsonNameHolder);
    var v = JsonValue(mapToJson(m.valueMapper, fieldRef(r, FieldName)));
    put(j, jsonName, v);
}

[M, R]
mapRecordFieldFromJson(m: M, j, r: R) {
    alias FieldName = RecordFieldJsonMapperFieldName(M);
    var jsonName = recordFieldJsonNameHolderGet(m.jsonNameHolder);
    var jsonFieldValue = index(j, jsonName);
    fieldRef(r, FieldName) = mapFromJson(m.valueMapper, jsonFieldValue);
}



[R]
MakeRecordJsonMapper(static R) {
    var f = name -> [static name, RecordFieldJsonMapper[R, name]];
    return ..mapValues(f, ..filterValues(Name -> IncludeRecordJsonField(R, Name), ..RecordFieldNames(R)));
}

record RecordJsonMapper[R] = ..MakeRecordJsonMapper(R);

[R]
overload JsonMapperMaps(static RecordJsonMapper[R]) = R, JsonObject;


[R | Record?(R)]
overload JsonMapper(static R) = RecordJsonMapper[R];

[R]
overload mapToJson(m: RecordJsonMapper[R], r: R) {
    var j = JsonObject();
    ..for (fieldMapper in ..recordFields(m)) {
        mapRecordFieldToJson(fieldMapper, r, j);
    }
    return j;
}

[R]
overload mapFromJson(m: RecordJsonMapper[R], j: JsonObject) {
    var r = R();
    ..for (fieldMapper in ..recordFields(m)) {
        mapRecordFieldFromJson(fieldMapper, j, r);
    }
    return r;
}


/// sequence mapper


record SequenceMapper[S] (
    itemMapper: JsonMapper(SequenceElementType(S)),
);

[S]
overload JsonMapperMaps(static SequenceMapper[S]) = S, JsonArray;

[S | Sequence?(S)]
overload JsonMapper(static S) = SequenceMapper[S];

[S]
overload mapToJson(m: SequenceMapper[S], s: S) {
    var a = JsonArray();
    for (item in s) {
        push(a, mapToJson(m.itemMapper, item));
    }
    return a;
}

[S]
overload mapFromJson(m: SequenceMapper[S], j: JsonArray) {
    var s = S();
    for (item in j) {
        push(s, mapFromJson(m.itemMapper, item));
    }
    return s;
}


/// string mapper


record StringJsonMapper ();

overload JsonMapperMaps(static StringJsonMapper) = String, JsonString;

overload JsonMapper(static String) = StringJsonMapper;

overload mapToJson(m: StringJsonMapper, s: String) = JsonString(s);

overload mapFromJson(m: StringJsonMapper, j: JsonString) = j.value;


/// numeric mapper

[N | Numeric?(N)]
record NumericJsonMapper[N]();

[N]
overload JsonMapperMaps(static NumericJsonMapper[N]) = N, JsonNumber;

[N | Numeric?(N)]
overload JsonMapper(static N) = NumericJsonMapper[N];

[N]
overload mapToJson(m: NumericJsonMapper[N], n: N) = JsonNumber(n);

[N]
overload mapFromJson(m: NumericJsonMapper[N], j: JsonNumber) = N(j);


/// bool mapper

record BoolMapper();

overload JsonMapperMaps(static BoolMapper) = Bool, JsonBoolean;

overload JsonMapper(static Bool) = BoolMapper;

overload mapToJson(m: BoolMapper, b: Bool) = JsonBoolean(b);

overload mapFromJson(m: BoolMapper, j: JsonBoolean) = j.value;



/// quick functions construct mapper and then unmap using that mapper
/// these functions can be expension if mapper construction is expensive

[T]
mapToJsonQuick(t: T) = mapToJson(jsonMapper(static T), t);

[T, J | JsonAnything?(J)]
mapFromJsonQuick(static T, j: J) = mapFromJson(jsonMapper(T), j);

