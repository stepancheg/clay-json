import lambdas.*;

import json.*;
import json.support.filterValues.*;

[T]
define jsonMapper(static T);

[M]
JsonMapper?(static M) = false;

[M | JsonMapper?(M)]
define JsonMapperMaps(static M);

[M]
JsonMapperMapsFrom(static M) = nthValue(static 0, ..JsonMapperMaps(M));
[M]
JsonMapperMapsTo(static M) = nthValue(static 1, ..JsonMapperMaps(M));

[M, T | JsonMapper?(M) and JsonMapperMapsFrom(M) == T]
define mapToJson(m: M, t: T);

[M, J | JsonMapper?(M) and JsonAnything?(J)]
define mapFromJson(m: M, j: J);


[M | JsonMapper?(M)]
overload mapFromJson(m: M, j: JsonValue) =
    mapFromJson(m, variantAs(j, JsonMapperMapsTo(M)));


/// record mapper


// overload to specify custom json field name for record field
// executed at compile time, must return static
[R, N]
RecordJsonFieldName(static R, static N) = N;

// overload to specify custon json field name for record field
// execute at mapper construction time, so mapToJsonQuick may be slow
// necessary when field name cannot be computed at compile time
[R, N]
define recordJsonFieldName(static R, static N);

// overload to exclude some field from serialization and deserialization
[R, N]
IncludeRecordJsonField(static R, static N) = true;



RecordJsonFieldMapper?(T) = false;

define recordJsonFieldMapperJsonFieldName(m);
[M | RecordJsonFieldMapper?(M)]
define RecordJsonFieldMapperFieldName(static M);


[R, N, JsonFieldName]
record RecordJsonFieldMapperStaticName[R, N, JsonFieldName] (
);

[R, FieldName, JsonFieldName]
overload RecordJsonFieldMapper?(static RecordJsonFieldMapperStaticName[R, FieldName, JsonFieldName]) = true;

[R, N, JsonFieldName]
overload recordJsonFieldMapperJsonFieldName(m: RecordJsonFieldMapperStaticName[R, N, JsonFieldName]) =
    StaticName(JsonFieldName);

[R, N, JsonFieldName]
overload RecordJsonFieldMapperFieldName(static RecordJsonFieldMapperStaticName[R, N, JsonFieldName]) = N;


[R, N]
record RecordJsonFieldMapperComputedName[R, N] (
    jsonFieldName: String,
);

[R, FieldName]
overload RecordJsonFieldMapper?(static RecordJsonFieldMapperComputedName[R, FieldName]) = true;

[R, N]
overload RecordJsonFieldMapperComputedName[R, N]() {
    return RecordJsonFieldMapperComputedName[R, N](recordJsonFieldName(R, N));
}

[R, N]
overload recordJsonFieldMapperJsonFieldName(m: RecordJsonFieldMapperComputedName[R, N]) =
    m.jsonFieldName;

[R, N]
overload RecordJsonFieldMapperFieldName(static RecordJsonFieldMapperComputedName[R, N]) = N;


[R, FieldName]
define RecordJsonFieldMapper(static R, static FieldName);

[R, FieldName]
overload RecordJsonFieldMapper(static R, static FieldName) =
    RecordJsonFieldMapperStaticName[R, FieldName, RecordJsonFieldName(R, FieldName)];

[R, FieldName | CallDefined?(recordJsonFieldName, Static[R], Static[FieldName])]
overload RecordJsonFieldMapper(static R, static FieldName) =
    RecordJsonFieldMapperComputedName[R, FieldName];


[R]
MakeRecordJsonMapper(static R) {
    var f = name -> [static name, RecordJsonFieldMapper(R, name)];
    return ..mapValues(f, ..filterValues(Name -> IncludeRecordJsonField(R, Name), ..RecordFieldNames(R)));
}

record RecordJsonMapper[R] = ..MakeRecordJsonMapper(R);

overload JsonMapper?(RecordJsonMapper) = true;
[R]
overload JsonMapperMaps(static RecordJsonMapper[R]) = R, JsonObject;


[R | Record?(R)]
overload jsonMapper(static R) = RecordJsonMapper[R]();

[M, R | RecordJsonFieldMapper?(M)]
mapRecordFieldToJson(m: M, r: R, j) {
    alias FieldName = RecordJsonFieldMapperFieldName(M);
    // TODO: compute statically
    var fieldMapper = jsonMapper(Type(fieldRef(null(R)^, FieldName)));
    var v = JsonValue(mapToJson(fieldMapper, fieldRef(r, FieldName)));
    put(j, recordJsonFieldMapperJsonFieldName(m), v);
}

[M, R | RecordJsonFieldMapper?(M)]
mapRecordFieldFromJson(m: M, j, r: R) {
    alias FieldName = RecordJsonFieldMapperFieldName(M);
    var fieldMapper = jsonMapper(Type(fieldRef(null(R)^, FieldName)));
    var jsonFieldValue = index(j, recordJsonFieldMapperJsonFieldName(m));
    fieldRef(r, FieldName) = mapFromJson(fieldMapper, jsonFieldValue);
}

[R]
overload mapToJson(m: RecordJsonMapper[R], r: R) {
    var j = JsonObject();
    ..for (fieldMapper in ..recordFields(m)) {
        mapRecordFieldToJson(fieldMapper, r, j);
    }
    return j;
}

[R]
overload mapFromJson(m: RecordJsonMapper[R], j: JsonObject) {
    var r = R();
    ..for (fieldMapper in ..recordFields(m)) {
        mapRecordFieldFromJson(fieldMapper, j, r);
    }
    return r;
}

/// string mapper


record StringJsonMapper ();

overload JsonMapper?(static StringJsonMapper) = true;
overload JsonMapperMaps(static StringJsonMapper) = String, JsonString;

overload jsonMapper(static String) = StringJsonMapper();

overload mapToJson(m: StringJsonMapper, s: String) = JsonString(s);

overload mapFromJson(m: StringJsonMapper, j: JsonString) = j.value;


/// numeric mapper

[N | Numeric?(N)]
record NumericJsonMapper[N]();

[N]
overload JsonMapper?(static NumericJsonMapper[N]) = true;
[N]
overload JsonMapperMaps(static NumericJsonMapper[N]) = N, JsonNumber;

[N | Numeric?(N)]
overload jsonMapper(static N) = NumericJsonMapper[N]();

[N]
overload mapToJson(m: NumericJsonMapper[N], n: N) = JsonNumber(n);

[N]
overload mapFromJson(m: NumericJsonMapper[N], j: JsonNumber) = N(j);


/// bool mapper

record BoolMapper();

overload JsonMapper?(static BoolMapper) = true;
overload JsonMapperMaps(static BoolMapper) = Bool, JsonBoolean;

overload jsonMapper(static Bool) = BoolMapper();

overload mapToJson(m: BoolMapper, b: Bool) = JsonBoolean(b);

overload mapFromJson(m: BoolMapper, j: JsonBoolean) = j.value;



/// quick functions construct mapper and then unmap using that mapper
/// these functions can be expension if mapper construction is expensive

[T]
mapToJsonQuick(t: T) = mapToJson(jsonMapper(static T), t);

[T, J | JsonAnything?(J)]
mapFromJsonQuick(static T, j: J) = mapFromJson(jsonMapper(T), j);

