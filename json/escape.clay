import strings.*;
import vectors.generic.*;
import printer.*;



private hexDigit(n): Char {
    if (n <= 9) {
        return Char(UInt32('0') + n);
    } else {
        return Char(UInt32('a') + (n - 10));
    }
}

private unsigned(c) = UnsignedIntegerOfSize(#Int(TypeSize(Type(c))))(c);

private quoteJsonCharTo(stream, c) {
    alias CharType = Type(c);
    if (c == '\n') {
        printTo(stream, "\\n");
    } else if (c == '\r') {
        printTo(stream, "\\r");
    } else if (c == '\t') {
        printTo(stream, "\\t");
    } else if (c == '\f') {
        printTo(stream, "\\f");
    } else if (c == CharType(8) /*\b*/) {
        printTo(stream, "\\b");
    } else if (c == '\\' or c == '\"') {
        printTo(stream, '\\');
        printTo(stream, c);
    } else if (c < CharType(0x20)) {
        printTo(stream, "\\u");
        ..for (n in ..staticIntegers(#4)) {
            printTo(stream, hexDigit(bitand(bitshr(unsigned(c), (3 - unwrapStatic(n)) * 4), 0xf)));
        }
    } else {
        printTo(stream, c);
    }
}

quoteJsonTo(stream, rawString) {
    printTo(stream, '"');
    for (c in rawString) {
        quoteJsonCharTo(stream, c);
    }
    printTo(stream, '"');
}

quoteJson(rawString) {
    var r = String();
    vectorRequestCapacity(r, size(rawString) + 2);
    quoteJsonTo(r, rawString);
    return r;
}

