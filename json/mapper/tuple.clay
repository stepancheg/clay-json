import json.model.*;
import json.mapper.*;


[T]
private ElementMappers(static T) =
    Tuple[..mapValues(JsonMapper, ..TupleElements(T))];

record TupleMapper[T] (
    elementMappers: ElementMappers(T),
);

[T]
overload JsonMapperMaps(static TupleMapper[T]) = T, JsonArray;

[T | Tuple?(T)]
overload JsonMapper(static T) = TupleMapper[T];

[T]
overload mapToJson(m: TupleMapper[T], t: T) {
    var a = JsonArray();
    ..for (i in staticIntegers(static TupleElementCount(T))) {
        alias elementMapper = staticIndex(m.elementMappers, i);
        push(a, mapToJson(elementMapper, staticIndex(t, i)));
    }
    return a;
}

[T]
overload mapFromJson(m: TupleMapper[T], j: JsonArray) {
    var t = T();
    if (size(j) != TupleElementCount(T)) {
        error("does not compute");
    }
    ..for (i in staticIntegers(static TupleElementCount(T))) {
        alias elementMapper = staticIndex(m.elementMappers, i);
        staticIndex(t, i) = mapFromJson(elementMapper, j[unwrapStatic(i)]);
    }
    return t;
}


