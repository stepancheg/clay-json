import strings.*;

import json.support.records.*;

import json.model.*;
import json.mapper.*;
import json.mapper.convert.*;



// overload to specify custom json field name for record field
// executed at compile time, must return static
[R, N]
RecordJsonFieldName(#R, #N) = N;

// overload to specify custon json field name for record field
// execute at mapper construction time, so mapToJsonQuick may be slow
// necessary when field name cannot be computed at compile time
[R, N]
define recordJsonFieldName(#R, #N);

// overload to exclude some field from serialization and deserialization
[R, N]
IncludeRecordJsonField(#R, #N) = true;

// overload to perform intermediate conversion
[R, N]
RecordFieldIntermediate(#R, #N) = RecordFieldTypeByName(#R, #N);

// overload to perform intermediate conversion
[R, N]
RecordFieldToIntermediateConverter(#R, #N) = Converter(RecordFieldTypeByName(#R, #N), RecordFieldIntermediate(#R, #N));



// field json name holder

JsonNameHolder?(T) = false;
[R when JsonNameHolder?(R)]
define jsonNameHolderGet(r: R);

[R, FieldName]
define JsonNameHolder(#R, #FieldName);


// #name holder

record JsonNameHolderStatic[JsonFieldName] ();

[JsonFieldName]
overload JsonNameHolder?(#JsonNameHolderStatic[JsonFieldName]) = true;

[R, FieldName]
overload JsonNameHolder(#R, #FieldName) =
    JsonNameHolderStatic[RecordJsonFieldName(R, FieldName)];

[JsonFieldName]
overload jsonNameHolderGet(r: JsonNameHolderStatic[JsonFieldName]) = StaticName(JsonFieldName);

// dynamic name holder

[R, FieldName]
record JsonNameHolderDynamic[R, FieldName] (
    jsonFieldName: String,
);

[R, FieldName]
overload JsonNameHolderDynamic[R, FieldName]() =
    JsonNameHolderDynamic[R, FieldName](recordJsonFieldName(R, FieldName));

[R, FieldName]
overload JsonNameHolder?(#JsonNameHolderDynamic[R, FieldName]) = true;

[R, FieldName when CallDefined?(recordJsonFieldName, Static[R], Static[FieldName])]
overload JsonNameHolder(#R, #FieldName) =
    JsonNameHolderDynamic[R, FieldName];

[R, FieldName]
overload jsonNameHolderGet(r: JsonNameHolderDynamic[R, FieldName]) = r.jsonFieldName;


// 

[R, FieldName]
record RecordFieldJsonMapperDefault[R, FieldName] (
    jsonNameHolder: JsonNameHolder(#R, #FieldName),
    intermediateConverter: RecordFieldToIntermediateConverter(#R, #FieldName),
    valueMapper: JsonMapper(ConverterRight(RecordFieldToIntermediateConverter(#R, #FieldName))),
);

[R, FieldName]
RecordFieldJsonMapperFieldName(#RecordFieldJsonMapperDefault[R, FieldName]) = FieldName;


[R, FieldName]
RecordFieldJsonMapper(#R, #FieldName) = RecordFieldJsonMapperDefault[R, FieldName];


[R, FieldName]
mapRecordFieldToJson(m: RecordFieldJsonMapperDefault[R, FieldName], r: R, j) {
    alias FieldName = RecordFieldJsonMapperFieldName(Type(m));
    var jsonName = jsonNameHolderGet(m.jsonNameHolder);
    var intermediate = convertLeftToRight(m.intermediateConverter, fieldRef(r, FieldName));
    var v = JsonValue(mapToJson(m.valueMapper, intermediate));
    put(j, jsonName, v);
}

[R, FieldName]
mapRecordFieldFromJson(m: RecordFieldJsonMapperDefault[R, FieldName], j, r: R) {
    alias FieldName = RecordFieldJsonMapperFieldName(Type(m));
    var jsonName = jsonNameHolderGet(m.jsonNameHolder);
    var jsonFieldValue = index(j, jsonName);
    var intermediate = mapFromJson(m.valueMapper, jsonFieldValue);
    fieldRef(r, FieldName) = convertRightToLeft(m.intermediateConverter, intermediate);
}



[R]
MakeRecordJsonMapper(#R) {
    var f = name -> [#name, RecordFieldJsonMapper(R, name)];
    return ..mapValues(f, ..filterValues(Name -> IncludeRecordJsonField(R, Name), ..RecordFieldNames(R)));
}

record RecordJsonMapper[R] = ..MakeRecordJsonMapper(R);

[R]
overload JsonMapperMaps(#RecordJsonMapper[R]) = R, JsonObject;


[R when Record?(R)]
overload JsonMapper(#R) = RecordJsonMapper[R];

[R]
overload mapToJson(m: RecordJsonMapper[R], r: R) {
    var j = JsonObject();
    ..for (fieldMapper in ..recordFields(m)) {
        mapRecordFieldToJson(fieldMapper, r, j);
    }
    return j;
}

[R]
overload mapFromJson(m: RecordJsonMapper[R], j: JsonObject) {
    var r = R();
    ..for (fieldMapper in ..recordFields(m)) {
        mapRecordFieldFromJson(fieldMapper, j, r);
    }
    return r;
}


