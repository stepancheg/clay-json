import lambdas.*;

import json.model.*;

import json.mapper.protocol.*;


import json.mapper.bool.*;

import json.mapper.numeric.*;

import json.mapper.records.*;
public import json.mapper.records.(RecordJsonFieldName);
public import json.mapper.records.(recordJsonFieldName);
public import json.mapper.records.(IncludeRecordJsonField);
public import json.mapper.records.(RecordFieldIntermediate);

import json.mapper.sequence.*;

import json.mapper.string.*;

import json.mapper.json.*;

import json.mapper.tuple.*;


[T]
jsonMapper(#T) = JsonMapper(T)();

[M when JsonMapper?(M) and JsonMapperMapsTo(M) != JsonValue]
overload mapFromJson(m: M, j: JsonValue) =
    mapFromJson(m, variantAs(j, JsonMapperMapsTo(M)));




/// quick functions construct mapper and then unmap using that mapper
/// these functions can be expension if mapper construction is expensive

[T]
mapToJsonQuick(t: T) = mapToJson(jsonMapper(#T), t);

[T, J when JsonAnything?(J)]
mapFromJsonQuick(#T, j: J) = mapFromJson(jsonMapper(T), j);

