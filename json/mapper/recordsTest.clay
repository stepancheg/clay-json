import strings.*;
import printer.*;
import sequences.*;

import test.*;

import json.*;
import json.mapper.*;

import json.mapper.records.(RecordFieldJsonMapper);
import json.mapper.records.(mapRecordFieldToJson);
import json.mapper.records.(mapRecordFieldFromJson);


///

record Album (
    title: String,
    year: UInt,
);

testRecordSimpleToJson(test) {
    var a = Album(String("Jamaicanization"), 2011u);
    var j = mapToJsonQuick(a);
    expectEqual(test, "record", JsonObject([title: "Jamaicanization", year: 2011]), j);
}

testRecordSimpleFromJson(test) {
    var j = JsonObject([title: "Wildhoney", year: 1994]);
    var expected = Album(String("Wildhoney"), 1994u);
    expectEqual(test, "record", expected, mapFromJsonQuick(Album, j));
    expectEqual(test, "record", expected, mapFromJsonQuick(Album, JsonValue(j)));
}


///

record Result (
    successful: Bool,
    returnValue: String,
);

overload RecordJsonFieldName(#Result, ##"returnValue") = #"return";


testRecordWithCustomStaticFieldNameToJson(test) {
    var r = Result(true, String("yep"));
    var j = mapToJsonQuick(r);
    expectEqual(test, "record", JsonObject([["successful", true], ["return", "yep"]]), j);
}

testRecordWithCustomStaticFieldNameFromJson(test) {
    var j = JsonObject([["successful", false], ["return", "no"]]);
    var expected = Result(false, String("no"));
    expectEqual(test, "record", expected, mapFromJsonQuick(Result, j));
    expectEqual(test, "record", expected, mapFromJsonQuick(Result, JsonValue(j)));
}


///

record Building (
    height: Int,
);

overload recordJsonFieldName(#Building, #"height") = str("height", size("height"));

testRecordWithCustomDynamicFieldNameToJson(test) {
    var r = Building(100);
    var j = mapToJsonQuick(r);
    expectEqual(test, "record", JsonObject([height6: 100]), j);
}

testRecordWithCustomDynamicFieldNameFromJson(test) {
    var j = JsonObject([height6: 22]);
    var expected = Building(22);
    expectEqual(test, "record", expected, mapFromJsonQuick(Building, j));
}


///

record RecordWithTransientField (
    color: String,
    colorNumberCache: Int,
);

overload IncludeRecordJsonField(#RecordWithTransientField, #"colorNumberCache") = false;

testRecordWithExcludedFieldToJson(test) {
    var r = RecordWithTransientField(String("red"), 0xff0000);
    var j = mapToJsonQuick(r);
    expectEqual(test, "record", JsonObject([color: "red"]), j);
}

testRecordWithExcludedFieldFromJson(test) {
    var j = JsonObject([color: "blue"]);
    var expected = RecordWithTransientField(String("blue"), 0);
    expectEqual(test, "record", expected, mapFromJsonQuick(RecordWithTransientField, j));
}


///

record RecordWithCustomFieldSerializer (
    foo: Int,
    bar: String,
);


record RecordFieldJsonMapperForBar ();

overload mapRecordFieldToJson(m: RecordFieldJsonMapperForBar, r, j) {
    put(j, "bar1", slice(r.bar, 0, 4));
    put(j, "bar2", sliceFrom(r.bar, 4));
}

overload mapRecordFieldFromJson(m: RecordFieldJsonMapperForBar, j, r) {
    r.bar = String(j.bar1) ++ String(j.bar2);
}


overload RecordFieldJsonMapper(#RecordWithCustomFieldSerializer, #"bar") = RecordFieldJsonMapperForBar;


testRecordWithCustomFieldSerializerToJson(test) {
    var r = RecordWithCustomFieldSerializer(12, String("quantum"));
    var j = mapToJsonQuick(r);
    expectEqual(test, "record", JsonObject([foo: 12, bar1: "quan", bar2: "tum"]), j);
}

testRecordWithCustomFieldSerializerFromJson(test) {
    var j = JsonObject([foo: 13, bar1: "silv", bar2: "er"]);
    var expected = RecordWithCustomFieldSerializer(13, String("silver"));
    expectEqual(test, "record", expected, mapFromJsonQuick(RecordWithCustomFieldSerializer, j));
}


///

mapperRecordsTestSuite() =
    TestSuite(
        "mapper.records", array(
            TestCase("simple to json", testRecordSimpleToJson),
            TestCase("simple from json", testRecordSimpleFromJson),
            TestCase("custom static field name to json", testRecordWithCustomStaticFieldNameToJson),
            TestCase("custom static field name from json", testRecordWithCustomStaticFieldNameFromJson),
            TestCase("custom dynamic field name to json", testRecordWithCustomDynamicFieldNameToJson),
            TestCase("custom dynamic field name from json", testRecordWithCustomDynamicFieldNameFromJson),
            TestCase("excluded field to json", testRecordWithExcludedFieldToJson),
            TestCase("excluded field from json", testRecordWithExcludedFieldFromJson),
            TestCase("custom field serializer to json", testRecordWithCustomFieldSerializerToJson),
            TestCase("custom field serializer from json", testRecordWithCustomFieldSerializerFromJson),
        )
    );

    
mapperRecordsTestMain() = testMain(mapperRecordsTestSuite());

main() = mapperRecordsTestMain();

