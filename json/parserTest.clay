import test.*;

import json.*;
import json.parser.*;
import json.support.decimal.*;

parserTestSuite() =
    TestSuite(
        "parser", array(
            TestCase("parse null", test => {
                var r = parseJson("null");
                expectTrue(test, "isNull", isNull(r));
            }),
            TestCase("leading and trailing spaces", test => {
                var r = parseJson("\n\rnull \t");
                expectTrue(test, "isNull", isNull(r));
            }),
            TestCase("parse boolean", test => {
                var t = parseJson("true");
                var f = parseJson("false");
                expectTrue(test, "isBoolean", isBoolean(t));
                expectTrue(test, "isBoolean", isBoolean(f));
                expectTrue(test, "Bool", Bool(t));
                expectFalse(test, "Bool", Bool(f));
            }),
            TestCase("parse int", test => {
                var seventeen = parseJson("17");
                expectTrue(test, "isNumber", isNumber(seventeen));
                expectEqual(test, "== 17", 17, Int(seventeen));
            }),
            TestCase("parse signed int", test => {
                var minusSeventeen = parseJson("-17");
                expectTrue(test, "isNumber", isNumber(minusSeventeen));
                expectEqual(test, "== -17", -17, Int(minusSeventeen));
            }),
            TestCase("parse 1.5", test => {
                var oneAndHalf = parseJson("1.5");
                expectTrue(test, "isNumber", isNumber(oneAndHalf));
                expectEqual(test, "== 1.5", Decimal(15, -1), Decimal(oneAndHalf));
            }),
            TestCase("parse 1.5e5", test => {
                var oneAndHalf = parseJson("1.5e5");
                expectTrue(test, "isNumber", isNumber(oneAndHalf));
                expectEqual(test, "== 1.5e5", Decimal(15, 4), Decimal(oneAndHalf));
            }),
            TestCase("parse string simple", test => {
                var s = parseJson("\"hi\"");
                expectTrue(test, "isString", isString(s));
                expectEqual(test, "==", "hi", String(s));
            }),
            TestCase("parse string quote", test => {
                var s = parseJson("\"\\\"\"");
                expectTrue(test, "isString", isString(s));
                expectEqual(test, "==", "\"", String(s));
            }),
            TestCase("parse string backslash", test => {
                var s = parseJson("\"\\\\\"");
                expectTrue(test, "isString", isString(s));
                expectEqual(test, "==", "\\", String(s));
            }),
            TestCase("parse string tab", test => {
                var s = parseJson("\"\\t\"");
                expectTrue(test, "isString", isString(s));
                expectEqual(test, "==", "\t", String(s));
            }),
            TestCase("parse string newline", test => {
                var s = parseJson("\"\\n\"");
                expectTrue(test, "isString", isString(s));
                expectEqual(test, "==", "\n", String(s));
            }),
            TestCase("parse string u escapes", test => {
                var s = parseJson("\"\\u0001\\u0045\"");
                expectTrue(test, "isString", isString(s));
                expectEqual(test, "==", "\x01\x45", String(s));
            }),
            TestCase("parse object 0", test => {
                var o = parseJson("{}");
                expectTrue(test, "isObject", isObject(o));
                expectEqual(test, "size", 0, size(o));
            }),
            TestCase("parse object 1", test => {
                var o = parseJson("{ \"kkk\": 888 }");
                expectTrue(test, "isObject", isObject(o));
                expectEqual(test, "size", 1, size(o));
                // TODO: check content
            }),
            TestCase("parse array 0", test => {
                var a = parseJson("[]");
                expectTrue(test, "isArray", isArray(a));
                expectEqual(test, "size", 0, size(a));
            }),
            TestCase("parse array 1", test => {
                var a = parseJson("[17]");
                expectTrue(test, "isArray", isArray(a));
                expectEqual(test, "size", 1, size(a));
                expectTrue(test, "[0] is number", isNumber(getArray(a)[0]));
                expectEqual(test, "[0]", 17, Int(getArray(a)[0]));
                expectEqual(test, "[0]", 17, Int(a[0]));
            }),
            TestCase("parse array 2", test => {
                var a = parseJson("[\"ab\", 12]");
                expectTrue(test, "isArray", isArray(a));
                expectEqual(test, "size", 2, size(a));
                expectTrue(test, "[0] is string", isString(getArray(a)[0]));
                expectEqual(test, "[0]", "ab", String(getArray(a)[0]));
                expectTrue(test, "[1] is number", isNumber(getArray(a)[1]));
                expectEqual(test, "[1]", 12, Int(getArray(a)[1]));
            }),
        ),
    );

parserTestMain() = testMain(parserTestSuite());

main() = parserTestMain();

