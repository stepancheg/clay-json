import data.strings.*;
import printer.*;

import test.*;

import json.*;
import json.parser.*;
import json.support.decimal.*;

parserTestSuite() =
    TestSuite(
        "parser", array(
            TestCase("parse null", => {
                var r = parseJson("null");
                expectTrue(isNull(r));
            }),
            TestCase("leading and trailing spaces", => {
                var r = parseJson("\n\rnull \t");
                expectTrue(isNull(r));
            }),
            TestCase("parse boolean", => {
                var t = parseJson("true");
                var f = parseJson("false");
                expectTrue(isBoolean(t));
                expectTrue(isBoolean(f));
                expectTrue(Bool(t));
                expectFalse(Bool(f));
            }),
            TestCase("parse int", => {
                var seventeen = parseJson("17");
                expectTrue(isNumber(seventeen));
                expectEqual(17, Int(seventeen));
            }),
            TestCase("parse signed int", => {
                var minusSeventeen = parseJson("-17");
                expectTrue(isNumber(minusSeventeen));
                expectEqual(-17, Int(minusSeventeen));
            }),
            TestCase("parse 1.5", => {
                var oneAndHalf = parseJson("1.5");
                expectTrue(isNumber(oneAndHalf));
                expectEqual(Decimal(15, -1), Decimal(oneAndHalf));
            }),
            TestCase("parse 1.5e5", => {
                var oneAndHalf = parseJson("1.5e5");
                expectTrue(isNumber(oneAndHalf));
                expectEqual(Decimal(15, 4), Decimal(oneAndHalf));
            }),
            TestCase("parse string simple", => {
                var s = parseJson("\"hi\"");
                expectTrue(isString(s));
                expectEqual("hi", String(s));
            }),
            TestCase("parse string quote", => {
                var s = parseJson("\"\\\"\"");
                expectTrue(isString(s));
                expectEqual("\"", String(s));
            }),
            TestCase("parse string backslash", => {
                var s = parseJson("\"\\\\\"");
                expectTrue(isString(s));
                expectEqual("\\", String(s));
            }),
            TestCase("parse string tab", => {
                var s = parseJson("\"\\t\"");
                expectTrue(isString(s));
                expectEqual("\t", String(s));
            }),
            TestCase("parse string newline", => {
                var s = parseJson("\"\\n\"");
                expectTrue(isString(s));
                expectEqual("\n", String(s));
            }),
            TestCase("parse string u escapes", => {
                var s = parseJson("\"\\u0001\\u00a5\"");
                expectTrue(isString(s));
                expectEqual("\x01\xc2\xa5", String(s));
            }),
            TestCase("parse object 0", => {
                var o = parseJson("{}");
                expectTrue(isObject(o));
                expectEqual(0, size(o));
            }),
            TestCase("parse object 1", => {
                var o = parseJson("{ \"kkk\": 888 }");
                expectTrue(isObject(o));
                expectEqual(1, size(o));
                // TODO: check content
            }),
            TestCase("parse array 0", => {
                var a = parseJson("[]");
                expectTrue(isArray(a));
                expectEqual(0, size(a));
            }),
            TestCase("parse array 1", => {
                var a = parseJson("[17]");
                expectTrue(isArray(a));
                expectEqual(1, size(a));
                expectTrue(isNumber(getArray(a)[0]));
                expectEqual(17, Int(getArray(a)[0]));
                expectEqual(17, Int(a[0]));
            }),
            TestCase("parse array 2", => {
                var a = parseJson("[\"ab\", 12]");
                expectTrue(isArray(a));
                expectEqual(2, size(a));
                expectTrue(isString(getArray(a)[0]));
                expectEqual("ab", String(getArray(a)[0]));
                expectTrue(isNumber(getArray(a)[1]));
                expectEqual(12, Int(getArray(a)[1]));
            }),
        ),
    );

parserTestMain() = testMain(parserTestSuite());

main() = parserTestMain();

