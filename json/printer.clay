import printer.*;
import data.strings.*;

import json.model.*;
import json.escape.*;

record PrintCompact();
record PrintOneLine();
record PrintPretty(
    indent: UInt,
);

overload PrintPretty() = PrintPretty(0u);

variant PrintStyle (PrintCompact, PrintOneLine, PrintPretty);

[J when JsonAnything?(J)]
define printJsonTo(stream, j: J, style): ;

overload printJsonTo(stream, value: JsonNull, style) {
    printTo(stream, "null");
}

overload printJsonTo(stream, value: JsonBoolean, style) {
    printTo(stream, if (value.value) "true" else "false");
}

overload printJsonTo(stream, value: JsonString, style) {
    quoteJsonTo(stream, value.value);
}

overload printJsonTo(stream, value: JsonNumber, style) {
    printTo(stream, value.value.unscaled);
    if (value.value.scale != 0) {
        printTo(stream, 'e');
        printTo(stream, value.value.scale);
    }
}

private printNewlineAndIndentTo(stream, style) {
    if (variantIs?(PrintStyle(style), PrintPretty)) {
        var indent = variantAs(PrintStyle(style), PrintPretty).indent;
        printTo(stream, "\n");
        for (i in range(indent)) {
            printTo(stream, "    ");
        }
    }
    /*
    match(style,
        (p: PrintPretty) => {
            // ?
        },
        (x) => { printTo(stream, "x"); },
   );
   */
}

private comma(style) =
    match(PrintStyle(style),
        (p: PrintPretty) => CStringRef(cstring(",")),
        (p: PrintCompact) => CStringRef(cstring(",")),
        (p: PrintOneLine) => CStringRef(cstring(", ")),
    );

private printStyleNext(style) =
    match(PrintStyle(style),
        (p: PrintPretty) => PrintStyle(PrintPretty(p.indent + 1)),
        (x) => PrintStyle(x),
    );

overload printJsonTo(stream, value: JsonArray, style) {
    printTo(stream, "[");
    var first = true;
    for (item in value) {
        if (not first) {
            printTo(stream, comma(style));
        }
        printNewlineAndIndentTo(stream, printStyleNext(style));
        printJsonTo(stream, item, printStyleNext(style));
        first = false;
    }
    if (not first) {
        printNewlineAndIndentTo(stream, style);
    }
    printTo(stream, "]");
}

overload printJsonTo(stream, value: JsonObject, style) {
    printTo(stream, "{");
    var first = true;
    for (item in value) {
        if (not first) {
            printTo(stream, comma(style));
        }
        printNewlineAndIndentTo(stream, printStyleNext(style));
        printCompactTo(stream, JsonString(item.0));
        if (variantIs?(PrintStyle(style), PrintCompact)) {
            printTo(stream, ":");
        } else {
            printTo(stream, ": ");
        }
        printJsonTo(stream, item.1, printStyleNext(style));
        first = false;
    }
    if (not first) {
        printNewlineAndIndentTo(stream, style);
    }
    printTo(stream, "}");
}


overload printJsonTo(stream, value: JsonValue, style) =
    ..printJsonTo(stream, *value, style);

printCompactTo(stream, value) =
    ..printJsonTo(stream, value, PrintCompact());

printOneLineTo(stream, value) =
    ..printJsonTo(stream, value, PrintOneLine());

printPrettyTo(stream, value) =
    ..printJsonTo(stream, value, PrintPretty());


private strWithStyle(value, style) {
    var r = String();
    printJsonTo(r, value, style);
    return r;
}

strCompact(value) = strWithStyle(value, PrintCompact());
strOneLine(value) = strWithStyle(value, PrintOneLine());
strPretty(value) = strWithStyle(value, PrintPretty());


[J when JsonAnything?(J)]
overload printTo(stream, value: J) =
    ..printOneLineTo(stream, value);

